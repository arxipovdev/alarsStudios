"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["is-invalid"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["is-invalid"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// Generated by CoffeeScript 2.4.1
(function () {
  var init;

  init = function init() {
    var User, UserCollection, UserListView, UserView, item1, item2, item3, item4, userCollection, userListView;

    User = function () {
      var User =
      /*#__PURE__*/
      function (_Backbone$Model) {
        _inherits(User, _Backbone$Model);

        function User() {
          _classCallCheck(this, User);

          return _possibleConstructorReturn(this, _getPrototypeOf(User).apply(this, arguments));
        }

        _createClass(User, [{
          key: "validate",
          value: function validate(attrs, options) {
            var error, phoneRegex;
            phoneRegex = /^[\+]?(\d-?){10}\d$/;
            error = {};

            if (attrs.name.length === 0) {
              error.name = 'invalid name';
            }

            if (!phoneRegex.test(attrs.phone)) {
              error.phone = 'invalid phone';
            }

            if (error.name || error.phone) {
              return error;
            } else {
              return void 0;
            }
          }
        }]);

        return User;
      }(Backbone.Model);

      ;
      User.prototype.defaults = {
        name: '',
        phone: ''
      };
      return User;
    }.call(this);

    UserCollection = function () {
      var UserCollection =
      /*#__PURE__*/
      function (_Backbone$Collection) {
        _inherits(UserCollection, _Backbone$Collection);

        function UserCollection() {
          _classCallCheck(this, UserCollection);

          return _possibleConstructorReturn(this, _getPrototypeOf(UserCollection).apply(this, arguments));
        }

        return UserCollection;
      }(Backbone.Collection);

      ;
      UserCollection.prototype.model = User;
      return UserCollection;
    }.call(this);

    item1 = new User({
      name: 'Andrey',
      phone: '7-923-230-23-45'
    });
    item2 = new User({
      name: 'Ivan',
      phone: '7-923-345-45-45'
    });
    item3 = new User({
      name: 'Elena',
      phone: '7-345-230-22-45'
    });
    item4 = new User({
      name: 'Maxim',
      phone: '7-322-555-22-45'
    });
    userCollection = new UserCollection([item1, item2, item3, item4]);

    UserView = function () {
      //  userCollection = new UserCollection
      var UserView =
      /*#__PURE__*/
      function (_Backbone$View) {
        _inherits(UserView, _Backbone$View);

        function UserView() {
          _classCallCheck(this, UserView);

          return _possibleConstructorReturn(this, _getPrototypeOf(UserView).apply(this, arguments));
        }

        _createClass(UserView, [{
          key: "initialize",
          value: function initialize() {
            return this.template = _.template(document.querySelector('.userTemplate').innerHTML);
          }
        }, {
          key: "validationField",
          value: function validationField(user, name, phone) {
            if (user.validationError) {
              if (user.validationError.name) {
                name.classList.add('is-invalid');
                document.querySelector('.userTemplate__name__error').style.display = 'block';
              } else {
                name.classList.remove(_templateObject());
                document.querySelector('.userTemplate__name__error').style.display = 'none';
              }

              if (user.validationError.phone) {
                phone.classList.add('is-invalid');
                return document.querySelector('.userTemplate__phone__error').style.display = 'block';
              } else {
                phone.classList.remove('is-invalid');
                return document.querySelector('.userTemplate__phone__error').style.display = 'none';
              }
            }
          }
        }, {
          key: "edit",
          value: function edit() {
            var createInputHtml, element, hideElement, i, j, len, len1, name, phone, ref, ref1;

            hideElement = function hideElement(element) {
              return element.hidden = true;
            };

            ref = document.querySelectorAll('.userTemplate__edit');

            for (i = 0, len = ref.length; i < len; i++) {
              element = ref[i];
              hideElement(element);
            }

            ref1 = document.querySelectorAll('.userTemplate__delete');

            for (j = 0, len1 = ref1.length; j < len1; j++) {
              element = ref1[j];
              hideElement(element);
            }

            name = this.$('.userTemplate__name').text();
            phone = this.$('.userTemplate__phone').text();
            this.$('.userTemplate__save').attr('hidden', false);
            this.$('.userTemplate__cancel').attr('hidden', false);

            createInputHtml = function createInputHtml(className, classError, value, errorMsg) {
              return "<input class='".concat(className, " form-control form-control-sm' type='text' value='").concat(value, "'> <div class='").concat(classError, " invalid-feedback'>").concat(errorMsg, "</div>");
            };

            this.$('.userTemplate__name').html(createInputHtml('userTemplate__nameUpdated', 'userTemplate__name__error', name, 'Обязательное поле'));
            return this.$('.userTemplate__phone').html(createInputHtml('userTemplate__phoneUpdated', 'userTemplate__phone__error', phone, 'Введите корректный номер'));
          }
        }, {
          key: "save",
          value: function save() {
            var name, phone;
            name = document.querySelector('.userTemplate__nameUpdated');
            phone = document.querySelector('.userTemplate__phoneUpdated');
            this.model.set({
              name: name.value,
              phone: phone.value
            }, {
              validate: true
            });
            return this.validationField(this.model, name, phone);
          }
        }, {
          key: "cancel",
          value: function cancel() {
            return userListView.render();
          }
        }, {
          key: "delete",
          value: function _delete() {
            return this.model.destroy();
          }
        }, {
          key: "render",
          value: function render() {
            this.$el.html(this.template(this.model.toJSON()));
            return this;
          }
        }]);

        return UserView;
      }(Backbone.View);

      ;
      UserView.prototype.model = new User();
      UserView.prototype.tagName = 'tr';
      UserView.prototype.events = {
        'click .userTemplate__edit': 'edit',
        'click .userTemplate__save': 'save',
        'click .userTemplate__cancel': 'cancel',
        'click .userTemplate__delete': 'delete'
      };
      return UserView;
    }.call(this);

    UserListView = function () {
      var UserListView =
      /*#__PURE__*/
      function (_Backbone$View2) {
        _inherits(UserListView, _Backbone$View2);

        function UserListView() {
          _classCallCheck(this, UserListView);

          return _possibleConstructorReturn(this, _getPrototypeOf(UserListView).apply(this, arguments));
        }

        _createClass(UserListView, [{
          key: "initialize",
          value: function initialize() {
            this.model.on('add', this.render, this);
            this.model.on('change', this.changeCollection);
            this.model.on('remove', this.render, this);
            return this.render();
          }
        }, {
          key: "validationField",
          value: function validationField(user, name, phone) {
            if (user.validationError) {
              if (user.validationError.name) {
                name.classList.add('is-invalid');
                document.querySelector('.user__name__error').style.display = 'block';
              } else {
                name.classList.remove(_templateObject2());
                document.querySelector('.user__name__error').style.display = 'none';
              }

              if (user.validationError.phone) {
                phone.classList.add('is-invalid');
                return document.querySelector('.user__phone__error').style.display = 'block';
              } else {
                phone.classList.remove('is-invalid');
                return document.querySelector('.user__phone__error').style.display = 'none';
              }
            } else {
              this.model.add(user);
              name.value = '';
              phone.value = '';
              name.classList.remove('is-invalid');
              phone.classList.remove('is-invalid');
              document.querySelector('.user__name__error').style.display = 'none';
              return document.querySelector('.user__phone__error').style.display = 'none';
            }
          }
        }, {
          key: "addUser",
          value: function addUser() {
            var name, phone, user;
            name = document.querySelector('.user__name');
            phone = document.querySelector('.user__phone');
            user = new User();
            user.set({
              name: name.value,
              phone: phone.value
            }, {
              validate: true
            });
            return this.validationField(user, name, phone);
          }
        }, {
          key: "changeCollection",
          value: function changeCollection() {
            return setTimeout(function () {
              return userListView.render();
            }, 10);
          }
        }, {
          key: "addToCollection",
          value: function addToCollection(item) {
            var list, userView;
            userView = new UserView({
              model: item
            });
            list = document.querySelector('.user__list');
            return list.append(userView.render().el);
          }
        }, {
          key: "render",
          value: function render() {
            var list;
            list = document.querySelector('.user__list');
            list.innerHTML = '';
            this.model.each(function (user) {
              return list.append(new UserView({
                model: user
              }).render().el);
            });
            return this;
          }
        }]);

        return UserListView;
      }(Backbone.View);

      ;
      UserListView.prototype.el = document.querySelector('.user');
      UserListView.prototype.model = userCollection;
      UserListView.prototype.events = {
        'click .user__add': 'addUser'
      };
      return UserListView;
    }.call(this);

    return userListView = new UserListView();
  };

  window.onload = init;
}).call(void 0);